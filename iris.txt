// Functions
ID <-> ID		: ?a <-> ?a
/*
 * Identity; does nothing
 */

ZEROI <-> ZEROE		: ?a <-> (0 + ?a)
/*
 * Introduce/eliminate sum variant of type 0
 */

SWAPS <-> SWAPS		: (?a + ?b) <-> (?b + ?a)
/*
 * Swap the two variant types' sides
 * n = number of total variants in the type
 * d = first variant value of the right hand of the type
 * o = offset (usually 0 unless type is wrapped by another sum type)
 */

ASSRS <-> ASSLS		: (?a + (?b + ?c)) <-> ((?a + ?b) + ?c)
/*
 * Associate inner sum with types on the right or left
 * n = number of total variants in the type
 * d = first variant value of the right hand of the type
 * o = offset (usually 0 unless type is wrapped by another sum type)
 */

UNITI <-> UNITE		: ?a <-> (?a * 1)
/*
 * Introduce/eliminate product with unit type
 */

SWAPP <-> SWAPP 	: (?a * ?b) <-> (?b * ?a)
/*
 * Swap the first and second values
 */

ASSRP <-> ASSLP		: (?a * (?b * ?c)) <-> ((?a * ?b) * ?c)
/*
 * Associate inner product with types on the right or left
 */

DIST <-> FACT		: ((?a + ?b) * ?c) <-> ((?a * ?c) + (?b * ?c))
/*
 * Distribute inner sum over both product values/Factor inner sum into first value
 */

EXPN <-> COLN		: 0 <-> (-?a + ?a)
/*
 * Reverse type sign and direction of execution
 */

EXPF i <-> COLF i	: 1 <-> (1/?a * ?a)
/*
 * Allocate/deallocate new variable
 * i = offset to value in program memory being introduced
 * s = size of allocated/deallocated type in bytes
 */

// Arithmetic
ADD <-> SUB		: (int * int) <-> (int * int)
/*
 * Add/subtract two integers, with result placed in first value
 */

ADDI n <-> SUBI n	: int <-> int
/*
 * Add/subtract constant to/from integer
 */

MUL <-> DIV		: (int * int) <-> (int * int)
/*
 * Multiply/divide two integers, with result placed in first value
 */

MULI n <-> DIVI n	: int <-> int
/*
 * Multiply/divide integer with/by constant
 */

XOR <-> XOR		: (int * int) <-> (int * int)
/*
 * Exclusive-or on two integers, result placed in first value
 */

XORI n <-> XORI n 	: int <-> int
/*
 * Exclusive-or integer with constant
 */

NEG <-> NEG 		: int <-> int
/*
 * Flip sign of integer
 */

CSWAP <-> CSWAP		: ((int * int) * int) <-> ((int * int) * int)
/*
 * Controlled swap on two integers, with second value as control
 */

CSWAPI n <-> CSWAPI n	: (int * int) <-> (int * int)
/*
 * Controlled swap on two integers, with constant as control
 */

RR <-> RL		: (int * int) <-> (int * int)
/*
 * Rotate bits of an integer left/right
 */

RRI n <-> RLI n		: int <-> int
/*
 * Rotate bits of an integer left/right by constant value
 */

// Combinators
+{
/*
 * Left hand sum combinator delimiter
 * i = offset to first instruction of right half of combinator
 * n = division value of sum type
 */

+ // Division point of combinator

}+
/*
 * Right hand sum combinator delimiter
 * i = offset to first instruction of left half of combinator
 * n = division value of sum type
 */

*{
/*
 * First product combinator delimiter
 * i = offset to first instruction of second half of combinator
 */

* // Division point of combinator

}*
/*
 * Second product combinator delimiter
 * i = offset to first instruction of first half of combinator
 */

// Control/Memory
CALL f <-> UNCALL f		: ?a <-> ?b
/*
 * Invoke function forwards/backwards on datatype
 * @f = pointer to invoked function
 */

FOLW *a <-> RET			: int <-> ?a
/*
 * Return from/follow pointer to object
 * *a = pointer to object
 */

START <-> END			: ?a <-> ?a
/*
 * Designates beginning/end of function; operationally equivalent to ID
 */

EVAL <-> DEVAL			: ((?a <-> ?b) * ?a) <-> ((?a <-> ?b) * ?b)
/*
 * Invoke a function dynamically
 */

// Example Code
data0: (int * int) + (int * bool)	-- type definition
data1: (int + bool) * int

function: data0 <-> data1		-- function definition
    START
    +{
        ADD
        ID
	+
        SWAPP
    }+
    FACT
    *{			-- fst = @r0, snd = @r1
        +{
	    NEG
	    +
	    MULI 2
	}+
	*
	ADDI 69
    }*
    END

// Instruction Encoding
/*
 * I-Type
 *
 * 31				6 5	   0
 * [	      imm/ptr		] [ opcode ]
 *	        26b		      6b
 *
 * Instructions that do not contain additional information or
 * contain a constant value are represented by the I-Type
 * encoding. Most IRIS instructions are I-Type encoded.
 */

/*
 * C-Type
 *
 * 31	       19 18		6 5	   0
 * [   const	] [     off	] [ opcode ]
 *      13b	        13b	      6b
 *
 * The C-Type encoding is for the combinator and EXPF/COLF
 * instructions, which contain an offset to some location
 * in program memory and a constant value. For product
 * combinators, this value is empty. For sum combinators, this
 * value represents the division value for the type. For EXPF/COLF,
 * it is the size of the new value in bytes.
 */

/*
 * S-Type
 *
 * 31 30 29	 22 21     14 13      6 5	 0
 * [ 0 ] [ offset ] [  div  ] [ total ] [ opcode ]
 *  2b       8b	       8b	 8b	    6b
 *
 * The only instructions with the S-Type encoding are ASSRS/ASSLS
 * and SWAPS, which contain the total number of possible variants
 * for a given type, the division point between variants on the
 * left and right hand side, and an offset value, each represented
 * as an 8-bit integer. The last two bits are used as padding.
 */
